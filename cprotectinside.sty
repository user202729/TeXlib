\ProvidesExplPackage{cprotectinside}{2022/04/10}{0.0.0}{Use cprotect arbitrarily deeply nested}
\RequirePackage{strrepr}
\RequirePackage{etoolbox}
\RequirePackage{precattl}

\msg_new:nnn {cprotectinside} {delimiter-not-match} {Delimiters~does~not~match!}


% #1: single character for the delimiter e.g. '+'
% #2: the body
\precattl_exec:n{
\NewDocumentCommand\cprotectinside{v +v}{

	%\seq_set_split_keep_spaces:Nnn \_cpi_entries {#1} {#2}
	% cannot do this in old version

	\tl_set:Nn \_cpi_entries {#2}
	\tl_replace_all:Nnn \_cpi_entries {~} { \cO\  }  % replace space <space> with other <space>
	\seq_set_split:NnV \_cpi_entries {#1} \_cpi_entries

	\int_if_even:nT {\seq_count:N \_cpi_entries} {
		\msg_error:nn {cprotectinside} {delimiter-not-match}
	}
	\tl_build_gbegin:N \_cpi_result
	\seq_map_indexed_inline:Nn \_cpi_entries {
		% ##1 is index, ##2 is item
		\int_if_even:nTF {##1} {
			% index 2, 4, 6...: content to be cprotect-ed
			\strrepr_set:Nn \_cpi_tmp {##2}
			\_cpi_aux:V \_cpi_tmp
		} {
			% index 1, 3, 5...: normal text
			\tl_build_gput_right:Nn \_cpi_result {##2}
		}
	}
	\tl_build_gend:N \_cpi_result
	\begingroup
		\newlinechar=13\relax  % have to setup like this because +v collect newline as char 13
	\exp_args:NNNV \expandafter \endgroup \scantokens \_cpi_result
}
}

% it's complex to explain what this does... see its usage for details
\def \_cpi_aux:n #1 {
	\tl_build_gput_right:Nn \_cpi_result {\protecting{\cprotectinsideReexec{#1}}}
}

\def \cprotectinsideReexec #1 {
	\begingroup
		\escapechar=-1 \newlinechar=13\relax
		\everyeof {}
		\exp_args:NNNo \expandafter \endgroup \scantokens {\detokenize {#1}}
}

\cs_generate_variant:Nn \_cpi_aux:n {V}
\cs_generate_variant:Nn \tl_gset_rescan:Nnn {NnV}
