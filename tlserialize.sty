\ProvidesExplPackage{tlserialize}{2022/07/11}{0.0.0}{Serialize token list}
\RequirePackage{precattl}
\RequirePackage{saveenv}
\RequirePackage{currfile}
\RequirePackage{rescansync}
%\GenerateVariantsFile:n{tlserialize.sty}
%\GenerateVariantsFileLog:n{tlserialize.sty}

\msg_new:nnn {tlserialize} {cannot-serialize}
	{Token~list~cannot~be~serialized}
\msg_new:nnn {tlserialize} {cannot-deserialize}
	{Token~list~cannot~be~deserialized}

\cs_new_protected:Npn \tlserialize:NnF #1 #2 {
	\tlserialize:NnTF #1 {#2} {} % dangling
}

\cs_new_protected:Npn \tlserialize:NnT #1 #2 #3 { \tlserialize:NnTF #1 {#2} {#3} {} }

\cs_new_protected:Npn \tlserialize:Nn #1 #2{
	\tlserialize:NnF #1 {#2} {
		\msg_error:nn {tlserialize} {cannot-serialize}
	}
}


%\bench start.
\begin{rescansyncRewriteenv}{ \str_replace_all:Nnn #1 {__} {_tlser_} }
%\bench rescanned.
\begin{precattlenv}
%\bench precatted.

\cs_new:Npn \__process_char #1 #2 {
	%\prettye:n{{#1}{#2}}
	%\prettye:n{\expandafter \expandafter \expandafter \noexpand \char_generate:nn {`#2} {"#1}}
	\expandafter \expandafter \expandafter \noexpand \char_generate:nn {`#2} {"#1}
	\__process_s
}

\cs_new:Npn \__process_space_other_cat #1 {
	\expandafter \expandafter \expandafter \noexpand \char_generate:nn {32} {"#1}
	\__process_s
}

\cs_new:Npn \__process_cs #1 / {
	\expandafter \noexpand \csname #1 \endcsname
	\__process_s
}

% ======== originally taken from imperative_tlutil.sty ========
\cs_new:Npn \__process_s#1{
	\token_if_eq_charcode:NNTF #1 0 { % 0 <name> / → the control sequence
		\__process_cs
	} {
		%\token_if_eq_charcode:NNTF #1 s { % s → a space
		%	\cS\   \__process_s
		%} {
		%	\token_if_eq_charcode:NNTF #1 S { % S <cat> → a space
		%		\__process_space_other_cat
		%	} {
				\token_if_eq_charcode:NNTF #1 R { % R → frozenrelax
					\cFrozenRelax \__process_s
				} {
					\token_if_eq_charcode:NNTF #1 6 { % ⟨hex catcode = 6⟩ ⟨character⟩ → parameter
						## \__process_char 6
					} {
						\token_if_eq_charcode:NNF #1 . { % . → end
							\__process_char #1  % (hex catcode) (character) (or escape sequence with that character)
						}
					}
				}
		%	}
		%}
	}
}

% #2 must ends with string `.` (other catcode)
\cs_new_protected:Npn \tldeserializeb_terminated:Nn #1 #2 {
	\begingroup
		\str_set:Nn \__tmp {#2}
		\tl_replace_all:Nnn \__tmp {~} {\cO\ }
		\pretty:V \__tmp
		\exp_args:NNNx
	\endgroup \tl_set:Nn #1 {\expandafter \__process_s \__tmp}
}

\cs_new_protected:Npn \tldeserializeb:Nn #1 #2 {
	\tldeserializeb_terminated:Nn #1 {#2 .}
}

\cs_new_protected:Npn \tlserializeb_char_unchecked:nnNN #1 #2 #3 #4 {
	% #1=token, #2=char code, #3=catcode, #4: callback (will be called exactly once and with nothing following the input stream)
	\int_compare:nNnTF {#2} = {-1} {
		% token is control sequence
		\tl_if_eq:onTF {#1} {\cFrozenRelax} {
			#4 {\cStr{ R }} % R → frozenrelax
		} {
			\tl_if_eq:onTF {#1} { \cC{} } { % 0 <name> / → the control sequence
				#4 { 0/ }
			} {
				\exp_args:Nx #4 { 0 \exp_after:wN \cs_to_str:N #1 / }  % if it contains / or output will be wrong...
			}
		}
	} {
		% token is not control sequence
		% (hex catcode) (character) (or escape sequence with that character)
		\exp_args:Nx #4 {
			%\int_case:nnF {"#3} {
			%	{6}{ \cStr{6 # 6} }
			%}{
				#3
			%}
			\expandafter \string #1
		}
	}
}

\cs_new_protected:Npn \tlserializeb_unchecked:Nn #1 #2{
	\tl_build_begin:N #1
	\tl_set:Nn \__callback { \tl_build_put_right:Nn #1 }
	\tl_analysis_map_inline:nn {#2} {
		\tlserializeb_char_unchecked:nnNN {##1}{##2}##3\__callback
	}
	\tl_build_end:N #1
}

%\prg_new_protected_conditional:Npn
\cs_new_protected:Npn \tlserializeb:NnTF #1 #2 {
	\tlserializeb_unchecked:Nn #1 {#2}
	\tldeserializeb:NV \__tmp #1


	\tl_if_eq:NnTF \__tmp {#2} % dangling
}

\cs_new_protected:Npn \tlserializeb:NnF #1 #2 {
	\tlserializeb:NnTF #1 {#2} {} % dangling
}

\cs_new_protected:Npn \tlserializeb:NnT #1 #2 #3 { \tlserializeb:NnTF #1 {#2} {#3} {} }

\cs_new_protected:Npn \tlserializeb:Nn #1 #2{
	\tlserializeb:NnF #1 {#2} {
		\msg_error:nn {tlserialize} {cannot-serialize}
	}
}

%\bench end B block.

\end{precattlenv}
\end{rescansyncRewriteenv}

\cs_generate_variant:Nn \tl_build_put_right:Nn {NV}
\cs_generate_variant:Nn \tl_if_eq:nnTF {onTF}
\cs_generate_variant:Nn \tl_if_eq:nnF {onF}
\cs_generate_variant:Nn \str_map_inline:nn {xn}
\cs_generate_variant:Nn \tl_build_put_right:Nn {Nx}
\cs_generate_variant:Nn \tldeserialize:Nn {NV}
\cs_generate_variant:Nn \tldeserializeb:Nn {NV}
\cs_generate_variant:Nn \tldeserializeb_terminated:Nn {NV}
\cs_generate_variant:Nn \str_if_eq:nnTF {xVTF}
\cs_generate_variant:Nn \str_count:n {V}
\cs_generate_variant:Nn \exp_args:Nn {Nx}


\sys_if_engine_luatex:T {
	\RequirePackage{luamacrohelper}
	\directlua{require"tlserialize.lua"}
	\endinput
}


%\bench before rescan 2.
\begin{rescansyncRewriteenv}{ \str_replace_all:Nnn #1 {__} {_tlser_} }
%\bench after rescan 2.


\NewDocumentCommand\__set_str{mv}{
	\tl_set:Nn #1{#2}
}
\NewDocumentCommand\__append_str{mv}{
	\tl_put_right:Nn #1{#2}
}
\__set_str   \__preamble |{|
\__append_str\__preamble |\edef\F{\ifnum0=0\fi}|  % F for frozen relax
\__append_str\__preamble |\expandafter\let\expandafter\G\csname char_generate:nn\endcsname|  % (auxiliary)
\__append_str\__preamble |\escapechar=-1\edef\-{\string\ }|  % - for space
\__append_str\__preamble |\def\C#1.#2{\G{#1}{"#2}}|  % C for char
\__append_str\__preamble |\def\P#1.{##\G{#1}6}|      % P for param
\__append_str\__preamble |\def\O#1.{\G{#1}{12}}|      % O for other
\__append_str\__preamble |\def\A#1.{\expandafter\expandafter\expandafter\noexpand\G{#1}{13}}|  % A for active character
\__append_str\__preamble |\def\S#1{\expandafter\noexpand\csname #1\endcsname}|  % S for control sequence
\__append_str\__preamble |\edef\T{|

\__set_str   \__finale   |}\expandafter}\T%|

\__set_str   \__alt_finale |}\expandafter}\csname __result:n\expandafter\endcsname\expandafter{\T}%|


%\bench before precat2.
\begin{precattlenv}
	%\bench after precat2.
\cs_new_protected:Npn \tlserialize_unchecked:Nn #1 #2{
	\tl_build_begin:N #1
	\tl_build_put_right:NV #1 \__preamble
	\tl_analysis_map_inline:nn {#2} {
		% by documentation of \tl_analysis_map_inline:nn: #1=token, #2=char code, #3=catcode
		\int_compare:nNnTF {##2} = {-1} {
			% token is control sequence
			\tl_if_eq:onTF {##1} {\cFrozenRelax} {
				\tl_build_put_right:Nn #1 {\cStr{ \\F }}
			} {
				\tl_build_put_right:Nn #1 {\cStr{ \\S\{ }}
				\tl_if_eq:onF {##1} { \cC{} } {
					\str_map_inline:xn {\exp_after:wN \cs_to_str:N ##1} {  % side note, must use str here to preserve spaces
						\tl_build_put_right:Nx #1 { \cO{\\O} \number`####1 .}
					}
				}
				\tl_build_put_right:Nn #1 { \cStr{ \} }}
			}
		} {
			% token is not control sequence
			\tl_build_put_right:Nx #1 {
				\int_case:nnF {"##3} {
					{6}{ \cStr{\\P} ##2. }
					{10}{ \int_compare:nNnTF {##2}={32} {\cStr{\\-}} {\cStr{\\C} ##2.A} }
					{12}{ \cStr{\\O} ##2. }
					{13}{ \cStr{\\A} ##2. }
				}{
					\cStr{\\C} ##2.##3
				}
			}
		}
	}
	\tl_build_put_right:NV #1 \__finale
	\tl_build_end:N #1
}

%\prg_new_protected_conditional:Npn
\cs_new_protected:Npn \tlserialize:NnTF #1 #2 {
	\tlserialize_unchecked:Nn #1 {#2}
	\tldeserialize:NV \__tmp #1


	\tl_if_eq:NnTF \__tmp {#2} % dangling
}



\cs_new_protected:Npn \tldeserialize:Nn #1 #2{
	\str_if_eq:xVTF {\str_range:nnn {#2} {-\str_count:V \__finale} {-1}} \__finale {
		\cs_set_protected:Npn \__result:n ##1{
			\tl_set:Nn #1 {##1}
		}
		%\pretty:x  {going to rescan →
		%	\str_range:nnn {#2} {1} {-1-\str_count:V \__finale} \__alt_finale
		%}
		\exp_args:Nx \scantokens {
			\str_range:nnn {#2} {1} {-1-\str_count:V \__finale} \__alt_finale
		}
	} {
		\msg_error:nn {tlserialize} {cannot-deserialize}
	}
}






\end{precattlenv}

\end{rescansyncRewriteenv}

\iffalse

   ! "   $   & ' ( ) * + , - . /
 0 1 2 3 4 5 6 7 8 9   ; < = > ?
   A B C D E F G H I J K L M N O
 P Q R S T U V W X Y Z [   ]    
 ` a b c d e f g h i j k l m n o
 p q r s t u v w x y z   | 

 _ : @ #

\fi
