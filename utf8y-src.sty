\ExplSyntaxOn
\makeatletter
\RequirePackage{miniprep}
\miniprepoutputdir{/tmp/}
%\miniprep_always_recompile:
\miniprep{utf8y}

======== debug: on, replace: _utfy_, imperative

\imperativesetprefix{_utfy_}

\makeatletter
\ExplSyntaxOn

\errorcontextlines=100

\RequirePackage{genvar}
\RequirePackage{imperative_util}
debug((
\RequirePackage{prettytok}
debug))
\GenerateVariantsFile:n{utf8y-src.sty}  % will fix later.


\cs_new_protected:Npn \__default {}
\cs_new_protected:Npn \__ctrlglyphs {}
\cs_new_protected:Npn \__tipa {}
\cs_new_protected:Npn \__postscript {}
\cs_new_protected:Npn \__dirty {}
\cs_new_protected:Npn \__autogenerated {}

debug((
\int_new:N \__count
\int_zero:N \__count
debug))


\cs_new_protected:Npn \uc@dclc \scopevar #\utfcode #\tag debug(( #\replacement debug)) {

	debug((
		\int_incr:N \__count
		\int_compare:nNnT {\__count} = {1000} {
			\int_zero:N \__count
			\pretty:n {processing #\utfcode [#\tag] -> {#\replacement}}
			\pretty:n{look~good?}
		}

		\ifcsname __#\tag\endcsname
		\else
			\pretty:n {unhandled~tag :: ~#\tag}
		\fi
	debug))

	\int_compare:nNnF {#\utfcode} < {"A0} {
		\csname __#\tag\endcsname \__work {#\utfcode} debug(( {#\replacement} debug))
	}
}

\cs_new:Npn \__utfviii_code_to_str:n #1 {  % #1 is the code. Either a number or empty.
	\if \relax#1
		% then #1 is empty
	\else
		\char_generate:nn {#1} {12}
	\fi
}

\iow_new:N \__resulting_code_a  % for non-Unicode engine
\iow_new:N \__resulting_code_u  % for Unicode engine. For now only define the math characters
\iow_open:Nn \__resulting_code_a { utf8y-a.sty }
\iow_open:Nn \__resulting_code_u { utf8y-u.sty }

\iow_now:Nn \__resulting_code_a {  % NOTE the code below must be tokenizable in @-catcode-regime!
	\cO\%~This~file~is~automatically~generated.
}
\iow_now:Nn \__resulting_code_u {  % NOTE the code below must be tokenizable in @-catcode-regime!
	\cO\%~This~file~is~automatically~generated.^^J
	%\def\utfyDefineMath\cO#1\cO#2{
	%	\def\utfyTmp{\cO#2}
	%	\csname char_set_active_eq:NN\endcsname \cO#1 \utfyTmp
	%	\csname char_set_mathcode:nn\endcsname {`\cO#1} {"8000}
	%}
	\def \utfyDefineMath \cO#1{\mathcode`\cO#1="8000\begingroup\lccode`\cO\~=`\cO#1\lowercase{\endgroup\def\cO\~}}
}

\cs_new_protected:Npn \__execute_code \scopevar #\definer #\cs #\code {\zblock{
	% this will be wrapped around the "important" code that should be executed
	% #\definer is def/edef etc.
	% #\cs is e.g. \u8:×
	% #\code is obvious
	\assignoo #\csname  {\cs_to_str:N #\cs}
	\texconditional{\ifx #\definer \def}{
		\ucalllocal {
			\iow_now:Nn \__resulting_code_a  {
				\@namedef {#\csname} {#\code} 
			}
		}
	}{
		\ucalllocal {
			\errmessage{weird}
			%\iow_now:Nn \__resulting_code_a  {
			%	\expandafter #\definer \csname #\csname \endcsname {#\code}
			%}
		}
	}
	\ucalllocal {
		#\definer #\cs {#\code}
	}
}}

% is a r-function!
\cs_new_protected:Npn \__remove_ensuremath \scopevar #1 { \rblock{
	\assignoperate #\result {#1 \__tail} {
		\matchrm{\ensuremath #a \__tail}
		\putnext{#a}
	}
	% e.g. 
	% | #\replacement   | #\body  |
	% | \ensuremath{ab} | ab      |  (with the {} removed)
	% | \ensuremath a   | a       |

	\return {#\result}
} }

\sys_if_engine_pdftex:F {\errmessage{This must be run with PDFTeX because otherwise char_to_utfviii_bytes below will create mojibake}}

\cs_new_protected:Npn \__work \scopevar #\utfcode #\replacement {
	\zblock{
		\assignc #\utfseq { u8: \tl_map_function:fN {\char_to_utfviii_bytes:n {#\utfcode}} \__utfviii_code_to_str:n }

		\ifstartswith {#\replacement} {\ensuremath} {
			% write to Unicode file!
			\assignr #\bodya {\__remove_ensuremath{#\replacement}}
			\ucalllocal{
				\iow_now:Nx \__resulting_code_u {
					\cStr{\\utfyDefineMath\ }
						\zfunction{\expandonce \expandonce \matchrm{\cStr{u8:}}} \cs_to_str:N #\utfseq
					{\unexpanded{#\bodya}}
				}
			}
		} {}

		\ucalllocal{
			% now #\utfseq might be e.g. \u8:× or something
			% we assume \u8:... cannot have the meaning \relax because normally it's a macro
			\ifx #\utfseq \relax

				%\bool_set_false:N \__seen_param 
				%\tl_analysis_map_inline:nn {#\replacement} \scope #\token #\char #\cat {
				%	\if #\cat 6
				%		\bool_set_true:N \__seen_param 
				%	\fi
				%}
				%\bool_if:NTF \__seen_param {
				%	\__execute_code 
				%		\edef #\utfseq {\unexpanded{#\replacement}}  % temporary workaround for some that includes #1
				%} {
				%	\__execute_code
				%		\def #\utfseq {#\replacement}
				%}
				
				\tl_if_in:nnF {#\replacement} {\uc@cmb} {
					% ======== we don't handle UCS's combining Unicode characters for now
					\__execute_code
						\def #\utfseq {#\replacement}
				}



			\else
				\zblock{
					\ifstartswith {#\replacement} {\ensuremath} {
						\assignr #\body {\__remove_ensuremath{#\replacement}}
						\assigno #\oldcontent {#\utfseq}
						\ucalllocal{
							\__execute_code
								\def #\utfseq {\relax \ifmmode #\body \else #\oldcontent \fi}  % unfortunately this is not peek-safe for oldcontent. #\body does not need to be peek-safe though
						}
					} {
						% then do nothing, keep the old definition
						%\assigno #\oldcontent {#\utfseq}
						%\ucalllocal{
						%	\pretty:n{avoid~redefinition~old={#\oldcontent}~new={#\replacement}}
						%}
					}
				}
				\prettystop
			\fi
		}
	}
}

\cs_new_protected:Npn \__ignore_tag \__work #1 #2 {}
\let \__cjkjis     \__ignore_tag
\let \cC{__cjkbg5} \__ignore_tag
\let \__cjkhangul  \__ignore_tag
\let \__cjkgb      \__ignore_tag

\input{/tmp/all.def}
