\ProvidesExplPackage{pythonimmediate}{2022/12/23}{0.0.0}{Library to run Python code}

\errorcontextlines=100~

\RequirePackage{saveenv}
\RequirePackage{currfile}
\RequirePackage{l3keys2e}
\RequirePackage{precattl}


\cs_generate_variant:Nn \str_set:Nn {NV}
\cs_generate_variant:Nn \str_if_eq:nnT {VnT}
\cs_generate_variant:Nn \msg_error:nnn {nnV}
\cs_generate_variant:Nn \str_if_eq:nnF {xnF}
\cs_generate_variant:Nn \str_range:nnn {Vnn}
\cs_generate_variant:Nn \str_if_eq:nnF {VnF}
\cs_generate_variant:Nn \str_if_in:nnF {VnF}
\cs_generate_variant:Nn \tl_build_put_right:Nn {NV}

%\bench before~rescan.
%\bench after~rescan.

%\GenerateVariantsFile:n{\rescansynclastfilename}

\tl_set:Nn \_pythonimmediate_textopy_script_path{}
\str_set:Nn \_pythonimmediate_mode{multiprocessing-network}
\str_set:Nn \_pythonimmediate_python_executable{python3}
\keys_define:nn{pythonimmediate}{
	mode.tl_set:N=\_pythonimmediate_mode,
	python-executable.tl_set:N=\_pythonimmediate_python_executable,
}
\ProcessKeysOptions{pythonimmediate}

\str_set:NV \_pythonimmediate_mode \_pythonimmediate_mode
\str_set:NV \_pythonimmediate_textopy_script_path \_pythonimmediate_textopy_script_path

\msg_new:nnn {pythonimmediate} {shell-fail} {Shell~command~execution~failed!}
\msg_new:nnn {pythonimmediate} {cannot-read-line} {Cannot~read~line!}
\msg_new:nnn {pythonimmediate} {internal-error} {Internal~error!}
\msg_new:nnn {pythonimmediate} {invalid-mode} {Invalid~mode:~'#1'.}


\bool_new:N \_pythonimmediate_mode_multiprocessing_network
\bool_new:N \_pythonimmediate_mode_unnamed_pipe
\bool_new:N \_pythonimmediate_mode_child_process
\str_if_eq:VnT \_pythonimmediate_mode {multiprocessing-network} {\bool_set_true:N \_pythonimmediate_mode_multiprocessing_network}
\str_if_eq:VnT \_pythonimmediate_mode {unnamed-pipe} {\bool_set_true:N \_pythonimmediate_mode_unnamed_pipe}
\str_if_eq:VnT \_pythonimmediate_mode {child-process} {\bool_set_true:N \_pythonimmediate_mode_child_process}
\bool_if:nF {\_pythonimmediate_mode_multiprocessing_network || \_pythonimmediate_mode_unnamed_pipe || \_pythonimmediate_mode_child_process} {
    \msg_error:nnV {pythonimmediate} {invalid-mode} \_pythonimmediate_mode
}

% note on \newread: we need to persistently open the file anyway, so using LaTeX3 stream reference counting doesn't help


% ======== setup read file ========

\bool_if:NT \_pythonimmediate_mode_unnamed_pipe {  % in this case make sure the pipe remains open...
	\newread \_pythonimmediate_read_file
	\openin \_pythonimmediate_read_file=|"sleep~ 0.5s|\_pythonimmediate_python_executable \space -m ~ pythonimmediate.pytotex ~ \_pythonimmediate_mode"~  % we must use the primitive here to use the pipe file path
	% TODO sleep infinity causes some resource leak (the process will not exit after TeX exits). Need to fix
	% but sleep too little might be problematic that it exits before the setup is done
	% we can just assume machines are not that slow
}

\bool_if:NT \_pythonimmediate_mode_multiprocessing_network {
	\newread \_pythonimmediate_read_file
	\openin \_pythonimmediate_read_file=|"\_pythonimmediate_python_executable \space -m ~ pythonimmediate.pytotex ~ \_pythonimmediate_mode"~  % we must use the primitive here to use the pipe file path
}

\bool_if:NT \_pythonimmediate_mode_child_process {
	% make read file read from stdin
	% note that \ior_str_get:NN cannot be used here as it checks for \ifeof which breaks with terminal for some reason
	\int_const:Nn \_pythonimmediate_read_file {-1}
}

% ======== copy of ior_str_get but does not check for file end ========
\cs_generate_variant:Nn \use_ii_i:nn {o}
\cs_new_protected:Npn \_pythonimmediate_str_get:N #1 {
	\use_ii_i:on {\the\endlinechar\relax} {
		\endlinechar=-1~
		\readline \_pythonimmediate_read_file to #1
		\endlinechar=
	}
}



% ======== setup write file ========
\newwrite \_pythonimmediate_write_file
\bool_if:NTF \_pythonimmediate_mode_child_process {
	%\immediate\openout \_pythonimmediate_write_file=symlink-to-stderr.txt~
	% tried this method, it seems to work except that it's buffered when stderr is redirected to a file...
	\immediate\openout \_pythonimmediate_write_file=|"\_pythonimmediate_python_executable \space -m ~ pythonimmediate.copy_to_stderr"~
} {
	\immediate\openout \_pythonimmediate_write_file=|"\_pythonimmediate_python_executable \space -m ~ pythonimmediate.main"~
	% note that openout, even to shell, will append .tex if there's no dot in the command
	% so we artificially add a dot here in `.main`

	% both processes must be before the \readline below so that the 2 Python processes are started "in parallel"
	\_pythonimmediate_str_get:N \_pythonimmediate_line  % read one line from pytotex half, forward to textopy half

	\str_if_eq:VnT \_pythonimmediate_line {} {
		\msg_error:nn {pythonimmediate} {cannot-read-line}
	}

	% specify whether the engine support Unicode
	\str_const:Nn \_pythonimmediate_engine_unicode_indicator_pdftex {a}
	\str_const:Nn \_pythonimmediate_engine_unicode_indicator_ptex   {a}
	\str_const:Nn \_pythonimmediate_engine_unicode_indicator_uptex  {a}

	\str_const:Nn \_pythonimmediate_engine_unicode_indicator_xetex  {u}
	\str_const:Nn \_pythonimmediate_engine_unicode_indicator_luatex {u}

	\immediate\write\_pythonimmediate_write_file {
		\use:c {_pythonimmediate_engine_unicode_indicator_ \c_sys_engine_str}
		\_pythonimmediate_line
	}
}

% ======== bootstrap utility functions

% read one block of \TeX\ code from Python, store into the specified variable
% the block is delimited using |surround_delimiter()| in Python i.e. the first and last line are identical
% new lines are represented with ^^J
\cs_new_protected:Npn \_pythonimmediate_gread_block:N #1 {
	\begingroup
		\endlinechar=10~  % affect \readline
		\readline \_pythonimmediate_read_file to \_pythonimmediate_delimiter

		\tl_build_gbegin:N #1
		\readline \_pythonimmediate_read_file to \_pythonimmediate_line

		%\bench read~first~line.

		\bool_do_until:nn {\tl_if_eq_p:NN \_pythonimmediate_delimiter \_pythonimmediate_line} {
			\tl_build_gput_right:NV #1 \_pythonimmediate_line
			\readline \_pythonimmediate_read_file to \_pythonimmediate_line
		}
		\tl_build_gend:N #1
	\endgroup
}
\cs_generate_variant:Nn \tl_build_gput_right:Nn {NV}

\cs_new_protected:Npn \_pythonimmediate_read_block:N #1 {
	\_pythonimmediate_gread_block:N \_pythonimmediate_block
	\tl_set_eq:NN #1 \_pythonimmediate_block
}


% read one block of \TeX\ code from Python and |\scantokens|-run it
% the content inside is the actual TeX code to be executed
\cs_new_protected:Npn \_pythonimmediate_run_block: {
	\_pythonimmediate_gread_block:N \_pythonimmediate_code
	\begingroup
		\newlinechar=10~
		\expandafter
	\endgroup
	\scantokens \expandafter{\_pythonimmediate_code}
}  % trick described in https://tex.stackexchange.com/q/640274 to scantokens the code with \newlinechar=10

% ======== bootstrap code
\_pythonimmediate_run_block:

