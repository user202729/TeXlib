\ProvidesExplPackage{imperative}{2022-06-17}{0.0.0}{Imperative-style programming for LaTeX}
\RequirePackage{imperative_util}
\RequirePackage{genvar}
\RequirePackage{prettytok}
\pretty_if_initialized:F { \prettyinitterm }
\GenerateVariantsFile:n {imperative.sty}

\msg_new:nnn {imperative} {cannot-rebuild-fn} {Library~function~\detokenize{#1}~cannot~be~rebuilt!}

\tl_set:Nn\withexpandinit {
	\def\assertissingletoken #1{\directlua{withexpand_cmds.assertissingletoken()}{#1}}
	\def\assertissingletokenbetweenlabel #1 #2 {\directlua{withexpand_cmds.assertissingletokenbetweenlabel()}{#1}{#2}}
	\def\expandat     #1{\directlua{withexpand_cmds.expandat()}{#1}}
	\def\expandatlabel#1{\directlua{withexpand_cmds.expandatlabel()}{#1}}
	\def\onlabel      #1 #2 #3{\directlua{withexpand_cmds.onlabel()}{#1}{#2}{#3}}
	\def\after        #1 #2 #3{\directlua{withexpand_cmds.after()}  {#1}{#2}{#3}}
	\def\before       #1 #2 #3{\directlua{withexpand_cmds.before()} {#1}{#2}{#3}}
	\def\marklabel      #1 {\directlua{withexpand_cmds.marklabel()}{#1}}
}

\def\debug_putnextwithexpand #1 #2 {
	\directlua{prettyprint(replace_expandafter_with_ex(withexpand_compile(token.scan_toks(), token.scan_toks())))} {#1} {#2}
}

\protected\def\rdef#1 #{
	\directlua{rdef_call()}{#1}
}

\cs_new_protected:Npn \imperative_metadef:Npn #1 #{
	\directlua{metadef_call()}{#1}
}



% rdeflinenumbered can be called as
%    \rdeflinenumbered #1 #2 { body }   % (format 1)
% or
%    \rdeflinenumbered #1 #2 {} ! body !   % (format 2, if the first brace group is empty)
% only format 2 support delimiting the verbatim argument with something other than braces.

\TabsafeNewDocumentCommand \__rdeflinenumbered_help {m +v} {
	\tl_if_empty:nTF {#2} {
		% use format 2, \addlinemarker will grab a v-type argument
		\addlinemarker {\rdef #1}
	} {
		% use format 1
		\addlinemarker:nn {\rdef #1} {#2}
	}
}
\protected\def\rdeflinenumbered#1 #{
	\__rdeflinenumbered_help {#1}
}

\protected\def\imperative_allow_inline:{
	\directlua{imperative_nextstatement_properties.allow_inline=true}
}

\protected\def\zdef#1 #{
	\directlua{zdef_call()}{#1}
}
\TabsafeNewDocumentCommand \__zdeflinenumbered_help {m +v} {
	\tl_if_empty:nTF {#2} {  % similar to above
		\addlinemarker {\zdef #1}
	} {
		\addlinemarker:nn {\zdef #1} {#2}
	}
}
\protected\def\zdeflinenumbered#1 #{
	\__zdeflinenumbered_help {#1}
}

\protected\def\odefmark:N #1 {}
\protected\def\rdefmark:N #1 {}
\protected\def\zdefmark:N #1 {}

\def\__odef_helper:nNnn #1 #2 #3 #4 {
	#1 \def #2 #3 {#4}
	\directlua{register_lib_fn()} {#1} {#2} {#3} {#4}
	\odefmark:N #2
}
\protected\def\odef #1 #2 #{
	\__odef_helper:nNnn {\long} #1 {#2}
}

\protected\def \__try_def:nNnn #1 #2 #3 #4 {
	#1 \def \__test #3 {#4}

	\token_if_eq_meaning:NNTF \__test #2 {
		\directlua{register_lib_fn()} {#1} {#2} {#3} {#4}
	} {
		\msg_error:nnn {imperative} {cannot-rebuild-fn} {#2}
	}
}

\protected\def\register_lib_fn:N #1 {
	%\tl_set_rescan:Nnn \__ {\ExplSyntaxOn \catcode `\{ =1 \catcode `\} = }

	\tl_set_rescan:Nnx \__prefix {\ExplSyntaxOn} {\cs_prefix_spec:N #1}

	\tl_set_rescan:Nnx \__args {\ExplSyntaxOn
		%\catcode `\{ =10 \catcode `\} =10
	} {\cs_argument_spec:N #1}

	\tl_set_rescan:Nnx \__body {\ExplSyntaxOn
		%\catcode `\{ =1 \catcode `\} = 10
	} {\cs_replacement_spec:N #1}

	\__try_def:VNVV \__prefix #1 \__args \__body
}

\directlua{ require "imperative"}

\register_lib_fn:N \use:n
\register_lib_fn:N \use:nn
\register_lib_fn:N \use:nnn
\register_lib_fn:N \use:nnnn
\register_lib_fn:N \use_i:nn
\register_lib_fn:N \use_i:nnn
\register_lib_fn:N \use_i:nnnn
\register_lib_fn:N \use_i_ii:nnn
\register_lib_fn:N \use_ii:nn
\register_lib_fn:N \use_ii:nnn
\register_lib_fn:N \use_ii:nnnn
\register_lib_fn:N \use_ii_i:nn
\register_lib_fn:N \use_iii:nnn
\register_lib_fn:N \use_iii:nnnn
\register_lib_fn:N \use_iv:nnnn
\register_lib_fn:N \use_none:n
\register_lib_fn:N \use_none:nn
\register_lib_fn:N \use_none:nnn
\register_lib_fn:N \use_none:nnnn
\register_lib_fn:N \use_none:nnnnn
\register_lib_fn:N \use_none:nnnnnn
\register_lib_fn:N \use_none:nnnnnnn
\register_lib_fn:N \use_none:nnnnnnnn
\register_lib_fn:N \use_none:nnnnnnnnn

% defined in imperative_util.sty
\register_lib_fn:N \use_ii_to_i:w
\register_lib_fn:N \texconditional

\cs_new_protected:Npn \__precattl_next_then #1 #2 {
	\precattl_set:Nn \__tmp {#2}
	\exp_args:NnV \use:n {#1} \__tmp
}


\precattl_exec:n{
\NewDocumentEnvironment{imperativerun}{}{
	\saveenvreinsert \__data {
		\str_replace_all:Nnn \__data {\cO\^^J} {\cO\^^M}
		\str_put_right:Nn \__data {\cO\^^M}
		\exp_args:NnV \addlinemarker:nn {
			\__precattl_next_then {
				\directlua{cmd_imperative_run()}
			}
		} \__data
	}
}{
	\endsaveenvreinsert
}
}

\imperative_metadef:Npn \while #\codebefore #\condition #\code 
	#\labelcheck  #\labelcontinue
{
	\goto #\labelcheck
	\label #\labelcontinue

	#\code
	
	\label #\labelcheck
	#\codebefore
	\conditionalgoto {#\condition} #\labelcontinue
}

\imperative_metadef:Npn \assignoperate #\var #\initial_tl #\operations {
	\assignr #\var {
		\rblock{#\operations}    #\initial_tl
	}
}

% maybe this would benefit from statement fusion (\assigncc, etc.) as long as they don't depend on flags
\imperative_metadef:Npn \assignc #\var #\thecsname {
	\assigno #\var {\csname #\thecsname \endcsname}
	\assertis\Ntype #\var
}

% this one would benefit from checking if the first function is indeed r-function
\imperative_metadef:Npn \assignr #\var #\content {
	\assigno #\var {\exp:w #\content}
}

% similarly check if they're indeed o-function here etc.
\imperative_metadef:Npn \ocall #\content {
	\putnext {#\content} \expandonce
}

\imperative_metadef:Npn \rcall #\content {
	\ocall {\exp:w #\content}
}

% this one is one-time-use...
\imperative_metadef:Npn \rreturnpush_dim_comma #\content {
	\expcallpeek {
		\expandafter\exp_end:
			\the\dimexpr \continueblock
			\expandafter,
	}
}

% well. for convenience only.
% although the optimizer is smart enough to optimize \conditional{\use_i:nn}{}{ ... comment... } away (it's not yet enough to optimize \texconditional{\iffalse} though)
\imperative_metadef:Npn \comment #\content {}

\imperative_metadef:Npn \run #\content {#\content}

\imperative_metadef:Npn \assignnumber #\var #\numexpression {
	\assigno #\var {\the\numexpr #\numexpression}
	\assertis\number #\var
}

\precattl_exec:n{
\imperative_metadef:Npn \forint #\var #\begin #\end #\body {
	\assign #\var {#\begin}
	\assertis\number #\var
	\while {} {\texconditional{\ifnum #\var < #\end \cS\ }} {
		#\body
		\assignnumber #\var {#\var+1}
	}
}
}

\imperative_metadef:Npn \putnextbgroup {
	\putnext{\expandafter{\iffalse}\fi}
	\expandonce
}

\imperative_metadef:Npn \putnextegroup {
	\putnext{\iffalse{\fi}}
	\expandonce
}

% check if #\content starts with #\prefix (prefix is a compile-time fixed value that does not contain # or {})

%\imperative_metadef:Npn \ifstartswith #\content #\prefix #\truebranch #\falsebranch {
%	\conditional{
%		\zfunction{
%			\matchrm {##a #\prefix ##_ \_imperative_q} 
%			\return {
%				\tl_if_empty:nTF {##a}
%			}
%		} #\content \_imperative_d #\prefix \_imperative_q
%	} {#\truebranch} {#\falsebranch}
%}



% can leave out the truebranch and falsebranch here,
% but this will probably give "missing brace" diagnostic slightly earlier.

\imperative_metadef:Npn \ifcontains #\content #\inner #\truebranch #\falsebranch {
	\conditional{
		\zfunction{
			\matchrm {##a #\inner ##_ \_imperative_d}
		}

			#\content \_imperative_d  % case 1: if #\inner appears inside #\content then the first \_imperative_d match will ends here
			% then the function below will be executed which returns the true branch
			\zfunction{\matchrm{##_ \_imperative_d \use_ii:nn ##a ##b} \return{##a}}

			#\inner \_imperative_d  % case 2: otherwise, the first #\_imperative_d match will ends here
			% then the function below will be executed which returns the false branch
			\use_ii:nn
	} {#\truebranch} {#\falsebranch}
}

\imperative_metadef:Npn \ifstartswith #\content #\prefix #\truebranch #\falsebranch {
	\ifcontains {\_imperative_s #\content} {\_imperative_s #\prefix} {#\truebranch} {#\falsebranch}
}
