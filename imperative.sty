\ProvidesExplPackage{imperative}{2022-06-17}{0.0.0}{Imperative-style programming for LaTeX}
\RequirePackage{imperative_util}
\RequirePackage{genvar}
\GenerateVariantsFile:n {imperative.sty}

\msg_new:nnn {imperative} {cannot-rebuild-fn} {Library~function~\detokenize{#1}~cannot~be~rebuilt!}

\tl_set:Nn\withexpandinit {
	\def\assertissingletoken #1{\directlua{withexpand_cmds.assertissingletoken()}{#1}}
	\def\expandat     #1{\directlua{withexpand_cmds.expandat()}{#1}}
	\def\expandatlabel#1{\directlua{withexpand_cmds.expandatlabel()}{#1}}
	\def\onlabel      #1 #2 #3{\directlua{withexpand_cmds.onlabel()}{#1}{#2}{#3}}
	\def\after        #1 #2 #3{\directlua{withexpand_cmds.after()}  {#1}{#2}{#3}}
	\def\before       #1 #2 #3{\directlua{withexpand_cmds.before()} {#1}{#2}{#3}}
}

\def\debug_putnextwithexpand #1 #2 {
	\directlua{prettyprint(replace_expandafter_with_ex(withexpand_compile(token.scan_toks(), token.scan_toks())))} {#1} {#2}
}

\protected\def\rdef#1 #{
	\directlua{rdef_call()}{#1}
}

% rdeflinenumbered can be called as
%    \rdeflinenumbered #1 #2 { body }   % (format 1)
% or
%    \rdeflinenumbered #1 #2 {} ! body !   % (format 2, if the first brace group is empty)
% only format 2 support delimiting the verbatim argument with something other than braces.

\TabsafeNewDocumentCommand \__rdeflinenumbered_help {m +v} {
	\tl_if_empty:nTF {#2} {
		% use format 2, \addlinemarker will grab a v-type argument
		\addlinemarker {\rdef #1}
	} {
		% use format 1
		\addlinemarker:nn {\rdef #1} {#2}
	}
}
\protected\def\rdeflinenumbered#1 #{
	\__rdeflinenumbered_help {#1}
}

\protected\def\imperative_allow_inline:{
	\directlua{imperative_nextstatement_properties.allow_inline=true}
}

\protected\def\zdef#1 #{
	\directlua{zdef_call()}{#1}
}
\TabsafeNewDocumentCommand \__zdeflinenumbered_help {m +v} {
	\tl_if_empty:nTF {#2} {  % similar to above
		\addlinemarker {\zdef #1}
	} {
		\addlinemarker:nn {\zdef #1} {#2}
	}
}
\protected\def\zdeflinenumbered#1 #{
	\__zdeflinenumbered_help {#1}
}

\protected\def\odefmark:N #1 {}
\protected\def\rdefmark:N #1 {}
\protected\def\zdefmark:N #1 {}

\def\__odef_helper:Nnn #1 #2 #3 {
	\def #1 #2 {#3}
	\odefmark:N #1
}
\protected\def\odef #1 #2 #{
	\__odef_helper:Nnn #1 {#2}
}

\protected\def \__try_def:nNnn #1 #2 #3 #4 {
	#1 \def \__test #3 {#4}

	\token_if_eq_meaning:NNTF \__test #2 {
		\directlua{register_lib_fn()} {#1} {#2} {#3} {#4}
	} {
		\msg_error:nnn {imperative} {cannot-rebuild-fn} {#2}
	}
}

\protected\def\register_lib_fn:N #1 {
	%\tl_set_rescan:Nnn \__ {\ExplSyntaxOn \catcode `\{ =1 \catcode `\} = }

	\tl_set_rescan:Nnx \__prefix {\ExplSyntaxOn} {\cs_prefix_spec:N #1}

	\tl_set_rescan:Nnx \__args {\ExplSyntaxOn
		%\catcode `\{ =10 \catcode `\} =10
	} {\cs_argument_spec:N #1}

	\tl_set_rescan:Nnx \__body {\ExplSyntaxOn
		%\catcode `\{ =1 \catcode `\} = 10
	} {\cs_replacement_spec:N #1}

	\__try_def:VNVV \__prefix #1 \__args \__body
}

\directlua{ require "imperative"}

\register_lib_fn:N \use:n
\register_lib_fn:N \use:nn
\register_lib_fn:N \use:nnn
\register_lib_fn:N \use:nnnn
\register_lib_fn:N \use_i:nn
\register_lib_fn:N \use_i:nnn
\register_lib_fn:N \use_i:nnnn
\register_lib_fn:N \use_i_ii:nnn
\register_lib_fn:N \use_ii:nn
\register_lib_fn:N \use_ii:nnn
\register_lib_fn:N \use_ii:nnnn
\register_lib_fn:N \use_ii_i:nn
\register_lib_fn:N \use_iii:nnn
\register_lib_fn:N \use_iii:nnnn
\register_lib_fn:N \use_iv:nnnn
\register_lib_fn:N \use_none:n
\register_lib_fn:N \use_none:nn
\register_lib_fn:N \use_none:nnn
\register_lib_fn:N \use_none:nnnn
\register_lib_fn:N \use_none:nnnnn
\register_lib_fn:N \use_none:nnnnnn
\register_lib_fn:N \use_none:nnnnnnn
\register_lib_fn:N \use_none:nnnnnnnn
\register_lib_fn:N \use_none:nnnnnnnnn

% used in the \texconditional macro below
% example: \if<some TeX conditional> ... \use_ii_to_i:w \fi \use_ii:nn â†’ can be used as a conditional
\odef \use_ii_to_i:w \fi \use_ii:nn { \fi \use_i:nn }

% usage: for example \def \testEqualToken:TF #1 #2 { \texconditional {\ifx #1 #2} }
% \texconditional { <TeX conditional expression> } is a <condition> suitable for argument of \conditional{...}
\odef \texconditional #1 {#1 \use_ii_to_i:w \fi \use_ii:nn}
